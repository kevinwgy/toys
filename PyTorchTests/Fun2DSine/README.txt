Use either polynomials or neural networks to fit a 2D sinusoidal function

Step 1: Compile and run datagen.cpp
  $g++ datagen.cpp
  $./a.out
  ==> Will generate two txt files containing the training and validation data sets.
  ==> Default: 1000 sample points for training, 200 points for validation
  ==> Running "./a.out M N" would generate M points for training, N points for validation
  ==> By default, the sample points are generated by a fixed "seed" (hence repeatible). This
      can be easily changed (by uncommenting one line in the code).

Step 2: Open nn.py, specify the model and training parameters in the "USER'S INPUT" section
  ==> For polynomial fitting, the order/degree of polynomial can be specified
  ==> For neural networks, the layers of the network can be specified in "class NeuralNetwork"

Step 3: Training the model
  $python nn.py
  ==> Neural network will be saved in "model_scripted.pt".
  ==> Will generate a few plots

Step 4: Plot results
  $python plot_results.py
  ==> Edit "plot_results.py" to specify the plots needed.
